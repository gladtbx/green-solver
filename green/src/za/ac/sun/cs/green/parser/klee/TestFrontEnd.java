package za.ac.sun.cs.green.parser.klee;

import java.io.File;
import java.io.FileInputStream;
import java.util.Properties;

import za.ac.sun.cs.green.Green;
import za.ac.sun.cs.green.Instance;
import za.ac.sun.cs.green.expr.Expression;
import za.ac.sun.cs.green.resources.Pair;
import za.ac.sun.cs.green.store.redis.RedisStore;
import za.ac.sun.cs.green.util.Configuration;

// This class is intended to be a front end for a Klee output file generated by
// using the command line option --debug-solver-log=solver:smt
public class TestFrontEnd {
	public static void main(String [] args){
		if(args.length != 2){
			System.out.println("There should be two arguments: \n"
					+ "    1) A path to properties file\n"
					+ "    2) A path to Klee SMT output file\n");
			System.exit(1);
		}

		Properties p = new Properties();
		try {
			p.load(new FileInputStream(args[0]));
		} catch (Exception e) {
			System.err.println("Problem loading .properties file");
			System.exit(1);
		}

		KleeOutputParser parser = new KleeOutputParser(new File(args[1]));
		TestFrontEnd tfe = new TestFrontEnd();
		tfe.run(p, parser);
	}

	public void run(Properties p, KleeOutputParser parser){
		// Create a green Solver that we will pass all of the instances to.
		Green g = new Green(p);		
		new Configuration(g, p).configure();
		g.setStore(new RedisStore(g, p));

		int instanceNumber = 0;

		while(parser.hasNext()){
			// Get the Expression, and the Klee Calculated SAT Value 
			Pair<Expression, Boolean> pair = parser.getNext();

			System.out.println("Serving instance " + instanceNumber);
			instanceNumber ++;

			Instance instance = new Instance(g, null, pair.first);
			Boolean ret = (Boolean) instance.request("sat");
			g.report();
			if(pair.second != null && ! ret.equals(pair.second)){
				throw new java.lang.RuntimeException("The calculated SAT value didn't equal the value calculated by Klee");
			}
		}

		parser.close();
	}
}
